{"version":3,"file":"static/js/925.0b1ac093.chunk.js","mappings":"6IAeA,IAbgB,WAEd,OADAA,QAAQC,IAAI,OAEV,gBACEC,IAAKC,EACLC,IAAI,UAEJC,OAAO,OACPC,UAAU,W,8ECJhB,EAJkB,SAACC,GACjB,OAAO,gBAAKD,UAAU,QAAf,SAAwBC,EAAMC,a,oKC8JvC,UAvJ6B,SAACD,GAC5B,IAAIE,GAAUC,EAAAA,EAAAA,MAERC,GAAgBC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKH,iBAClDI,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,YAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,YAAnC,eAAOG,EAAP,KAAcC,EAAd,KAQMC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,SAAUF,EAAAA,KACPG,SAAS,8BACTC,QACC,8CACA,2DAEJC,iBAAkBL,EAAAA,KACfG,SAAS,wBACTG,MAAM,CAACN,EAAAA,GAAQ,YAAa,MAAO,0BASlCO,EAAc,WAEhBX,EADW,aAATD,EACM,OAEA,aAINa,EAAe,WAEjBV,EADY,aAAVD,EACO,OAEA,aAGb,OACE,gBAAKd,UAAU,qBAAf,UACE,gBAAKA,UAAU,YAAf,UACE,gBAAKA,UAAU,6BAAf,UACE,iBAAKA,UAAU,6BAAf,WACE,iBAAKA,UAAU,uBAAf,WACE,gBAAKA,UAAU,qBAAf,UACE,gBAAKA,UAAU,MAAf,UACE,gBAAKA,UAAU,WAAf,UACE,gBAAKA,UAAU,iBAAf,UACE,eAAIA,UAAU,aAAd,4CAKR,gBAAKA,UAAU,iBAAf,UACE,gBAAKA,UAAU,MAAf,UACE,SAAC,KAAD,CACE0B,cAxDI,CACpBP,SAAU,GACVG,iBAAkB,IAuDFN,iBAAkBA,EAClBW,SAzCD,SAACC,GAChB,IAAQT,EAA+BS,EAA/BT,SAAUG,EAAqBM,EAArBN,iBACZO,EAAQ5B,EAAM6B,MAAMC,OAAOF,MACjCpB,GAASuB,EAAAA,EAAAA,IAAgBb,EAAUG,EAAkBO,EAAO1B,KAmC9C,SAKG,SAAC8B,GACA,OACE,UAAC,KAAD,CAAMC,aAAa,MAAMlC,UAAU,mBAAnC,WACE,iBAAKA,UAAU,uBAAf,WACE,kBAAOmC,QAAQ,WAAWnC,UAAU,cAApC,2BAGA,iBAAKoC,MAAO,CAAEC,SAAU,YAAxB,WACE,SAAC,KAAD,CACEzB,KAAMA,EACNZ,UAAU,gBACVsC,KAAK,WACLC,YAAY,kBAEd,iBAAMC,QAAShB,EAAf,SACY,aAATZ,GACC,SAAC,MAAD,KAEA,SAAC,MAAD,UAIN,SAAC,KAAD,CACE0B,KAAK,WACLG,UAAWC,EAAAA,QAGf,iBAAK1C,UAAU,uBAAf,WACE,kBACEmC,QAAQ,mBACRnC,UAAU,cAFZ,mCAMA,iBAAKoC,MAAO,CAAEC,SAAU,YAAxB,WACE,SAAC,KAAD,CACEzB,KAAME,EACNd,UAAU,gBACVsC,KAAK,mBACLC,YAAY,2BAEd,iBAAMC,QAASf,EAAf,SACa,aAAVX,GACC,SAAC,MAAD,KAEA,SAAC,MAAD,UAIN,SAAC,KAAD,CACEwB,KAAK,mBACLG,UAAWC,EAAAA,QAGf,gBAAK1C,UAAU,cAAf,UACE,oBACEA,UAAU,oDACVY,KAAK,SACL+B,SAAUtC,EAHZ,4BAKkBA,IAAiB,SAAC,IAAD,uBAUnD,gBAAKL,UAAU,mBAAf,UACE,0BACE,2E","sources":["Component/Spinner/Spinner.js","Component/TextError/TextError.js","Pages/ResetPassword/ResetPasswordConfirm.js"],"sourcesContent":["import React from \"react\";\r\nimport spinner from \"../../assets/spinner.gif\";\r\nconst Spinner = () => {\r\n  console.log(\"in\");\r\n  return (\r\n    <img\r\n      src={spinner}\r\n      alt=\"spinner\"\r\n      // color={color}\r\n      height=\"30px\"\r\n      className=\"ml-4\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport \"./TextError.css\";\r\nconst TextError = (props) => {\r\n  return <div className=\"error\">{props.children}</div>;\r\n};\r\n\r\nexport default TextError;\r\n","import React, { useState } from \"react\";\r\nimport \"../Login/Login.css\";\r\nimport { Form, Field, Formik, ErrorMessage } from \"formik\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\nimport TextError from \"../../Component/TextError/TextError\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { confirmPassword } from \"../../Redux/Auth/thunk\";\r\nimport Spinner from \"../../Component/Spinner/Spinner\";\r\nimport { BsFillEyeFill, BsFillEyeSlashFill } from \"react-icons/bs\";\r\nconst ResetPasswordConfirm = (props) => {\r\n  let history = useHistory();\r\n  // props\r\n  const loading_reset = useSelector((state) => state.auth.loading_reset);\r\n  const dispatch = useDispatch();\r\n  const [type, setType] = useState(\"password\");\r\n  const [type1, setType1] = useState(\"password\");\r\n\r\n  //initial values of form field in formik\r\n  const initialValues = {\r\n    password: \"\",\r\n    confirm_password: \"\",\r\n  };\r\n  //validation rule for the form field in formik\r\n  const validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n      .required(\"Please Enter your password\")\r\n      .matches(\r\n        /^(?=.*[a-z])(?=.*\\d)[A-Za-z\\d@$!%*#?&]{6,}$/,\r\n        \"Must Contain 6 Characters, One alphabet and One Number \"\r\n      ),\r\n    confirm_password: Yup.string()\r\n      .required(\"Password is required\")\r\n      .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\"),\r\n  });\r\n  //submit handler for formik\r\n  const onSubmit = (values) => {\r\n    const { password, confirm_password } = values;\r\n    const token = props.match.params.token;\r\n    dispatch(confirmPassword(password, confirm_password, token, history));\r\n  };\r\n  // toggle password\r\n  const handleClick = () => {\r\n    if (type === \"password\") {\r\n      setType(\"text\");\r\n    } else {\r\n      setType(\"password\");\r\n    }\r\n  };\r\n  // toggle confirm password\r\n  const handleClick1 = () => {\r\n    if (type1 === \"password\") {\r\n      setType1(\"text\");\r\n    } else {\r\n      setType1(\"password\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"account-pages my-5\">\r\n      <div className=\"container\">\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col-md-8 col-lg-6 col-xl-5\">\r\n            <div className=\"card overflow-hidden\">\r\n              <div className=\"bg-primary bg-soft\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-sm-7\">\r\n                    <div className=\"text-white p-4\">\r\n                      <h5 className=\"text-white\">Choose a New Password</h5>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"card-body pt-0\">\r\n                <div className=\"p-2\">\r\n                  <Formik\r\n                    initialValues={initialValues}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={onSubmit}\r\n                  >\r\n                    {(formik) => {\r\n                      return (\r\n                        <Form autoComplete=\"off\" className=\"form-horizontal \">\r\n                          <div className=\"mb-3  password-field\">\r\n                            <label htmlFor=\"password\" className=\"form-label \">\r\n                              New Password\r\n                            </label>\r\n                            <div style={{ position: \"relative\" }}>\r\n                              <Field\r\n                                type={type}\r\n                                className=\"form-control \"\r\n                                name=\"password\"\r\n                                placeholder=\"New Password\"\r\n                              />\r\n                              <span onClick={handleClick}>\r\n                                {type === \"password\" ? (\r\n                                  <BsFillEyeSlashFill />\r\n                                ) : (\r\n                                  <BsFillEyeFill />\r\n                                )}\r\n                              </span>\r\n                            </div>\r\n                            <ErrorMessage\r\n                              name=\"password\"\r\n                              component={TextError}\r\n                            />\r\n                          </div>\r\n                          <div className=\"mb-3  password-field\">\r\n                            <label\r\n                              htmlFor=\"confirm_password\"\r\n                              className=\"form-label \"\r\n                            >\r\n                              Confirm New Password\r\n                            </label>\r\n                            <div style={{ position: \"relative\" }}>\r\n                              <Field\r\n                                type={type1}\r\n                                className=\"form-control \"\r\n                                name=\"confirm_password\"\r\n                                placeholder=\" Confirm New Password\"\r\n                              />\r\n                              <span onClick={handleClick1}>\r\n                                {type1 === \"password\" ? (\r\n                                  <BsFillEyeSlashFill />\r\n                                ) : (\r\n                                  <BsFillEyeFill />\r\n                                )}\r\n                              </span>\r\n                            </div>\r\n                            <ErrorMessage\r\n                              name=\"confirm_password\"\r\n                              component={TextError}\r\n                            />\r\n                          </div>\r\n                          <div className=\"mt-3 d-grid\">\r\n                            <button\r\n                              className=\"btn btn-primary waves-effect waves-light mt-4 m-3\"\r\n                              type=\"submit\"\r\n                              disabled={loading_reset}\r\n                            >\r\n                              Reset Password {loading_reset && <Spinner />}\r\n                            </button>\r\n                          </div>\r\n                        </Form>\r\n                      );\r\n                    }}\r\n                  </Formik>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"mt-3 text-center\">\r\n              <div>\r\n                <p>Â©2021 Card Management System.</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordConfirm;\r\n"],"names":["console","log","src","spinner","alt","height","className","props","children","history","useHistory","loading_reset","useSelector","state","auth","dispatch","useDispatch","useState","type","setType","type1","setType1","validationSchema","Yup","shape","password","required","matches","confirm_password","oneOf","handleClick","handleClick1","initialValues","onSubmit","values","token","match","params","confirmPassword","formik","autoComplete","htmlFor","style","position","name","placeholder","onClick","component","TextError","disabled"],"sourceRoot":""}