{"version":3,"file":"static/js/113.dff882be.chunk.js","mappings":"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","sources":["Component/NoData/index.js","Component/Pagination/DisplayEntries.js","Component/Pagination/index.js","Component/PaginationBlock/index.js","Component/Pagination/PaginationLimit.js","Component/Skeleton/ListingSkeleton.js","Component/Status/index.js","Component/Tooltip/Tooltip.js","Pages/District/DistrictList.js","Pages/District/index.js","Redux/District/api.js","Redux/District/actions.js","Redux/District/thunk.js","utils/defaultLimit.js"],"sourcesContent":["import React from \"react\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\nimport Tooltip from \"../Tooltip/Tooltip\";\r\n\r\nconst index = ({ search, onClick, addPermission }) => {\r\n  return (\r\n    <div className=\"text-center justify-content-center no-data\">\r\n      <h4 className=\"fw-normal mb-3\">No data to Display</h4>\r\n      {!search && addPermission && (\r\n        <h6>\r\n          Please{\" \"}\r\n          <Tooltip content=\"Add\">\r\n            <button\r\n              onClick={onClick}\r\n              className=\"btn btn-primary waves-effect waves-light btn-sm mx-2 p-1 nodata-btn\"\r\n            >\r\n              <FaPlus className=\"nodata-icon\" />\r\n              &nbsp;Add\r\n            </button>\r\n          </Tooltip>{\" \"}\r\n          some...\r\n        </h6>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default index;\r\n","import React from \"react\";\r\n\r\nconst DisplayEntries = ({ offset, limit, count }) => {\r\n  return(\r\n    <React.Fragment>\r\n      <p>\r\n        Showing {offset} to{\" \"}\r\n        {limit > count ? count : limit === 0 ? count : limit} of {count} entries\r\n      </p>  \r\n    </React.Fragment> \r\n  );\r\n};\r\n\r\nexport default React.memo(DisplayEntries);","import React from \"react\";\r\nconst Pagination = ({\r\n  postsPerPage,\r\n  totalPosts,\r\n  paginate,\r\n  handleClick,\r\n  currentPage,\r\n  maxPageNumberLimit,\r\n  minPageNumberLimit,\r\n}) => {\r\n  const pageNumbers = [];\r\n  if (postsPerPage > 0) {\r\n    for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n      pageNumbers.push(i);\r\n    }\r\n  }\r\n  let pageIncrementBtn = null;\r\n  if (pageNumbers.length > maxPageNumberLimit) {\r\n    pageIncrementBtn = (\r\n      <button className=\"page-link\" onClick={() => handleClick(\"next\")}>\r\n        &hellip;\r\n      </button>\r\n    );\r\n  }\r\n\r\n  let pageDecrementBtn = null;\r\n  if (minPageNumberLimit >= 1) {\r\n    pageDecrementBtn = (\r\n      <button className=\"page-link\" onClick={() => handleClick(\"previous\")}>\r\n        &hellip;\r\n      </button>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <ul className=\"pagination pagination-sm justify-content-end\">\r\n        <li className=\"page-item \">\r\n          <button\r\n            className=\"page-link\"\r\n            onClick={() => handleClick(\"previous\")}\r\n            disabled={currentPage === pageNumbers[0] ? true : false}\r\n          >\r\n            &laquo;\r\n          </button>\r\n        </li>\r\n        {/* {pageDecrementBtn} */}\r\n        {pageNumbers.map((number, i) => {\r\n          if (number < maxPageNumberLimit + 1 && number > minPageNumberLimit) {\r\n            return (\r\n              <li className=\"page-item\" key={number}>\r\n                <button\r\n                  onClick={() => paginate(number)}\r\n                  className={`page-link ${\r\n                    i + 1 === currentPage ? \"active\" : null\r\n                  }`}\r\n                >\r\n                  {number}\r\n                </button>\r\n              </li>\r\n            );\r\n          } else {\r\n            return null;\r\n          }\r\n        })}\r\n        {/* {pageIncrementBtn} */}\r\n        <li className=\"page-item\">\r\n          <button\r\n            className=\"page-link\"\r\n            onClick={() => handleClick(\"next\")}\r\n            disabled={\r\n              currentPage === pageNumbers[pageNumbers.length - 1] ? true : false\r\n            }\r\n          >\r\n            &raquo;\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(Pagination);\r\n","import React from \"react\";\r\nimport DisplayEntries from \"../Pagination/DisplayEntries\";\r\nimport Pagination from \"../Pagination\";\r\nconst index = ({\r\n  currentPage,\r\n  postsPerPage,\r\n  count,\r\n  paginate,\r\n  handleClick,\r\n  setCurrentPage,\r\n  minPageNumberLimit,\r\n  maxPageNumberLimit,\r\n}) => {\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-6\">\r\n          <DisplayEntries\r\n            offset={1 + (currentPage - 1) * postsPerPage}\r\n            limit={postsPerPage * currentPage}\r\n            count={count}\r\n          />\r\n        </div>\r\n        {postsPerPage < count && (\r\n          <div className=\"col-6 text-right\">\r\n            <Pagination\r\n              postsPerPage={postsPerPage}\r\n              totalPosts={count}\r\n              paginate={paginate}\r\n              handleClick={handleClick}\r\n              currentPage={currentPage}\r\n              setCurrentPage={setCurrentPage}\r\n              minPageNumberLimit={minPageNumberLimit}\r\n              maxPageNumberLimit={maxPageNumberLimit}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default index;\r\n","import React from \"react\";\r\n\r\nconst PaginationLimit = ({ postsPerPage, setPostsPerPage }) => {\r\n  const handleChange = (e) => {\r\n    const data = Number(e.target.value);\r\n    setPostsPerPage(data);\r\n  };\r\n  return (\r\n    <>\r\n      <p className=\"fw-normal p-0 m-0\">\r\n        Show\r\n        <span className=\"ml-1 mr-1\">\r\n          {\" \"}\r\n          <select value={postsPerPage} onChange={handleChange}>\r\n            <option value=\"10\">10</option>\r\n            <option value=\"20\">20</option>\r\n            <option value=\"40\">40</option>\r\n            <option value=\"99999999\">All</option>\r\n          </select>\r\n        </span>{\" \"}\r\n        entries\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(PaginationLimit);","import React from \"react\";\r\nimport Skeleton from \"react-loading-skeleton\";\r\nconst ListingSkeleton = () => {\r\n  return (\r\n    <>\r\n      <div className=\"row \">\r\n        <div className=\"col-6 d-flex \">\r\n          <Skeleton width={200} height={25} />\r\n        </div>\r\n        <div className=\"col-6 d-flex justify-content-end\">\r\n          <Skeleton width={80} height={30} />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mt-2\">\r\n        <Skeleton height={40} />\r\n        <Skeleton count={10} height={25} />\r\n      </div>\r\n      <div className=\"row d-flex mt-2\">\r\n        <div className=\"col-6\">\r\n          <Skeleton width={220} height={20} />\r\n        </div>\r\n        <div className=\"col-6 d-flex justify-content-end\">\r\n          <Skeleton width={200} height={30} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListingSkeleton;\r\n","import React from \"react\";\r\nimport { FaCheckCircle } from \"react-icons/fa\";\r\nimport { BsFillXCircleFill } from \"react-icons/bs\";\r\nconst index = ({ active }) => {\r\n  return (\r\n    <div>\r\n      {active ? (\r\n        <FaCheckCircle style={{ color: \"green\", fontSize: \"15px\" }} />\r\n      ) : (\r\n        <BsFillXCircleFill\r\n          style={{\r\n            color: \"rgba(230, 16, 16, 0.979)\",\r\n            fontSize: \"15px\",\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default index;\r\n","import React from \"react\";\r\nimport Tippy from \"@tippyjs/react\";\r\nconst Tooltip = ({ content, children }) => {\r\n  return <Tippy content={content}>{children}</Tippy>;\r\n};\r\n\r\nexport default Tooltip;","import React, { useState } from \"react\";\r\nimport { FaEdit, FaTrash } from \"react-icons/fa\";\r\nimport Status from \"../../Component/Status\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getPageDistrict,\r\n  getPrevious,\r\n  getNext,\r\n} from \"../../Redux/District/thunk\";\r\nimport { districtConstants } from \"../../Redux/District/constants\";\r\nimport PaginationBlock from \"../../Component/PaginationBlock\";\r\n\r\nimport NoData from \"../../Component/NoData\";\r\nimport Tooltip from \"../../Component/Tooltip/Tooltip\";\r\nimport { useHistory } from \"react-router-dom\";\r\nconst DistrictList = ({\r\n  currentPage,\r\n  postsPerPage,\r\n  setCurrentPage,\r\n  count,\r\n  setShowModal,\r\n  maxPageNumberLimit,\r\n  setMaxPageNumberLimit,\r\n  minPageNumberLimit,\r\n  setMinPageNumberLimit,\r\n  search,\r\n}) => {\r\n  const history = useHistory();\r\n  // props\r\n  const group = useSelector((state) => state.auth.group);\r\n  const is_superuser = useSelector((state) => state.auth.is_superuser);\r\n  const districts = useSelector((state) => state.district.districts);\r\n  const next = useSelector((state) => state.district.next);\r\n  const previous = useSelector((state) => state.district.previous);\r\n  const dispatch = useDispatch();\r\n\r\n  // for pagination\r\n  const [pageNumberLimit] = useState(5);\r\n\r\n  //change page\r\n  const paginate = (number) => {\r\n    dispatch(getPageDistrict({ number, postsPerPage }));\r\n    setCurrentPage(number);\r\n  };\r\n\r\n  //handle Click\r\n  const handleClick = (type) => {\r\n    if (type === \"previous\") {\r\n      dispatch(getPrevious(previous));\r\n      setCurrentPage((prevState) => prevState - 1);\r\n      if ((currentPage - 1) % pageNumberLimit === 0) {\r\n        setMaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\r\n        setMinPageNumberLimit(minPageNumberLimit - pageNumberLimit);\r\n      }\r\n    } else if (type === \"next\") {\r\n      dispatch(getNext(next));\r\n      setCurrentPage((prevState) => prevState + 1);\r\n      if (currentPage + 1 > maxPageNumberLimit) {\r\n        setMaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\r\n        setMinPageNumberLimit(minPageNumberLimit + pageNumberLimit);\r\n      }\r\n    }\r\n  };\r\n\r\n  //pagination end\r\n\r\n  //edit function for the province\r\n  const handleEdit = (id) => {\r\n    dispatch({ type: districtConstants.DISTRICT_EDIT_SUCCESS, payload: id });\r\n    history.push(\"/create-district\");\r\n  };\r\n  const addPermission =\r\n    group === \"ADMIN\" || group === \"MAINTAINER\" || is_superuser ? true : false;\r\n  return (\r\n    <>\r\n      {districts?.length > 0 ? (\r\n        <div className=\"mt-2\">\r\n          <div className=\"table-scrollable\">\r\n            <table className=\"table table-hover table-bordered text-center\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\" style={{ width: \"8%\" }}>\r\n                    S.N\r\n                  </th>\r\n                  <th scope=\"col\">District Name</th>\r\n\r\n                  <th scope=\"col\">Active</th>\r\n\r\n                  <th scope=\"col\">Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {districts?.length > 0 &&\r\n                  districts.map((district, i) => {\r\n                    const { id, name_nepali, is_active } = district;\r\n                    return (\r\n                      <tr key={id}>\r\n                        <td className=\"fw-bold\" style={{ width: \"8%\" }}>\r\n                          {postsPerPage * (currentPage - 1) + (i + 1)}{\" \"}\r\n                        </td>\r\n                        <td>{name_nepali === \"\" ? \"-\" : name_nepali}</td>\r\n\r\n                        <td>\r\n                          <Status active={is_active} />\r\n                        </td>\r\n\r\n                        <td>\r\n                          <Tooltip content=\"Edit\">\r\n                            <button\r\n                              onClick={() => handleEdit(id)}\r\n                              className=\"btn btn-sm btn-edit btn-primary mx-2\"\r\n                            >\r\n                              <FaEdit />\r\n                            </button>\r\n                          </Tooltip>\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          {count > 0 && (\r\n            <PaginationBlock\r\n              currentPage={currentPage}\r\n              postsPerPage={postsPerPage}\r\n              count={count}\r\n              paginate={paginate}\r\n              handleClick={handleClick}\r\n              setCurrentPage={setCurrentPage}\r\n              minPageNumberLimit={minPageNumberLimit}\r\n              maxPageNumberLimit={maxPageNumberLimit}\r\n            />\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <NoData\r\n          search={search}\r\n          onClick={() => history.push(\"/create-district\")}\r\n          addPermission={addPermission}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DistrictList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { defaultLimit } from \"../../utils/defaultLimit\";\r\nimport { getDistrict, handleSearch } from \"../../Redux/District/thunk\";\r\nimport DistrictList from \"./DistrictList\";\r\nimport ListingSkeleton from \"../../Component/Skeleton/ListingSkeleton\";\r\nimport PaginationLimit from \"../../Component/Pagination/PaginationLimit\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\nimport Tooltip from \"../../Component/Tooltip/Tooltip\";\r\nimport { useHistory } from \"react-router-dom\";\r\nconst District = () => {\r\n  const history = useHistory();\r\n  const permissions = useSelector((state) => state.auth.permissions);\r\n  const is_superuser = useSelector((state) => state.auth.is_superuser);\r\n  const districts = useSelector((state) => state.district.districts);\r\n  const loading = useSelector((state) => state.district.loading);\r\n  const loading_updated = useSelector(\r\n    (state) => state.district.loading_updated\r\n  );\r\n  const count = useSelector((state) => state.district.count);\r\n  const search = useSelector((state) => state.search.search);\r\n  const dispatch = useDispatch();\r\n\r\n  // for pagination\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [maxPageNumberLimit, setMaxPageNumberLimit] = useState(5);\r\n  const [minPageNumberLimit, setMinPageNumberLimit] = useState(0);\r\n  const [postsPerPage, setPostsPerPage] = useState(10);\r\n\r\n  //pagination end\r\n  //loading all the food\r\n  useEffect(() => {\r\n    if (postsPerPage === 0) {\r\n      if (search === \"\") {\r\n        dispatch(getDistrict(count));\r\n      } else {\r\n        dispatch(handleSearch(search, count));\r\n      }\r\n    } else {\r\n      if (search === \"\") {\r\n        if (postsPerPage === defaultLimit) {\r\n          dispatch(getDistrict(postsPerPage));\r\n        } else {\r\n          setCurrentPage(1);\r\n          dispatch(getDistrict(postsPerPage));\r\n        }\r\n      } else {\r\n        setCurrentPage(1);\r\n        setMaxPageNumberLimit(5);\r\n        setMinPageNumberLimit(0);\r\n        dispatch(handleSearch(search, postsPerPage));\r\n      }\r\n    }\r\n  }, [dispatch, postsPerPage, search]);\r\n  return (\r\n    <>\r\n      <div className=\"card\">\r\n        <div className=\"header-content\">\r\n          <h4 className=\"mb-sm-0 fw-normal\">District</h4>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <div className=\"row m-0 p-0\">\r\n            {districts?.length > 0 && (\r\n              <>\r\n                <div className=\"col-6\">\r\n                  <PaginationLimit\r\n                    postsPerPage={postsPerPage}\r\n                    setPostsPerPage={setPostsPerPage}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"col-6 text-right\">\r\n                  <Tooltip content=\"Add\">\r\n                    <button\r\n                      className=\"btn btn-primary waves-effect waves-light btn-sm float-end\"\r\n                      onClick={() => history.push(\"/create-district\")}\r\n                    >\r\n                      <FaPlus className=\"mb-1\" />\r\n                      &nbsp;Add\r\n                    </button>\r\n                  </Tooltip>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n          {loading && <ListingSkeleton />}\r\n          {loading_updated && <ListingSkeleton />}\r\n          {!loading && !loading_updated && (\r\n            <DistrictList\r\n              currentPage={currentPage}\r\n              setCurrentPage={setCurrentPage}\r\n              postsPerPage={postsPerPage}\r\n              setPostsPerPage={setPostsPerPage}\r\n              count={count}\r\n              maxPageNumberLimit={maxPageNumberLimit}\r\n              setMaxPageNumberLimit={setMaxPageNumberLimit}\r\n              minPageNumberLimit={minPageNumberLimit}\r\n              setMinPageNumberLimit={setMinPageNumberLimit}\r\n              search={search}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default District;\r\n","import axiosInstance from \"../../utils/axios\";\r\n\r\n//obtaining the paginated data\r\nexport const getDistrict = (postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/core-app/district?offset=0&limit=${postsPerPage}&ordering=-id`\r\n  );\r\n\r\n//obtaining all data\r\nexport const getAllDistrict = () =>\r\n  axiosInstance.get(`api/v1/core-app/district?ordering=-id`);\r\n\r\n//obtaining the previous page data from paginated data\r\nexport const getPrevious = (previous) => axiosInstance.get(previous);\r\n\r\n//obtaining the next page data from paginated data\r\nexport const getNext = (next) => axiosInstance.get(next);\r\n\r\n//obtaining the particular page data from paginated data\r\nexport const getPageDistrict = (number, postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/core-app/district?offset=${\r\n      (number - 1) * postsPerPage\r\n    }&limit=${postsPerPage}&ordering=-id`\r\n  );\r\n\r\n//creating function\r\nexport const createDistrict = (body) =>\r\n  axiosInstance.post(`api/v1/core-app/district`, body);\r\n\r\n//deleting function\r\nexport const deleteDistrict = (id) =>\r\n  axiosInstance.delete(`api/v1/core-app/district/${id}`);\r\n\r\n//update function\r\nexport const updateDistrict = (id, body) =>\r\n  axiosInstance.patch(`api/v1/core-app/district/${id}`, body);\r\n\r\n//searching function\r\nexport const handleSearch = (search, postsPerPage) =>\r\n  axiosInstance.get(\r\n    `api/v1/core-app/district?offset=0&limit=${postsPerPage}&search=${search}`\r\n  );\r\nexport const checkRedundantDataName = (data, cancelToken) =>\r\n  axiosInstance.get(`api/v1/core-app/district?name=${data}`, {\r\n    cancelToken: cancelToken.token,\r\n  });\r\n","import { districtConstants } from \"./constants\";\r\n// actions\r\nexport const loadingAction = () => ({\r\n  type: districtConstants.LOADING_DISTRICT,\r\n});\r\nexport const loadingUpdatedAction = () => ({\r\n  type: districtConstants.LOADING_UPDATED,\r\n});\r\nexport const getDistrictSuccessAction = (data) => ({\r\n  type: districtConstants.GET_DISTRICT_SUCCESS,\r\n  payload: data,\r\n});\r\nexport const getDistrictFailAction = (error) => ({\r\n  type: districtConstants.GET_DISTRICT_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const createDistrictSuccessAction = (data) => ({\r\n  type: districtConstants.CREATE_DISTRICT_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const createDistrictFailAction = (error) => ({\r\n  type: districtConstants.CREATE_DISTRICT_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const deleteDistrictSuccessAction = (data) => ({\r\n  type: districtConstants.DISTRICT_DELETED_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const deleteDistrictFailAction = (error) => ({\r\n  type: districtConstants.DISTRICT_DELETED_FAIL,\r\n  payload: error,\r\n});\r\n\r\nexport const updatedDistrictSuccessAction = (data) => ({\r\n  type: districtConstants.DISTRICT_UPDATE_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const updatedDistrictFailAction = (error) => ({\r\n  type: districtConstants.DISTRICT_UPDATE_FAIL,\r\n  payload: error,\r\n});\r\n","import * as API from \"./api\";\r\nimport * as actions from \"./actions\";\r\nimport { errorFunction, successFunction } from \"../../Component/Alert\";\r\nimport { defaultLimit } from \"../../utils/defaultLimit\";\r\n//get  Bank\r\nexport const getDistrict = (postsPerPage) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.getDistrict(postsPerPage);\r\n    dispatch(actions.getDistrictSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getDistrictFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n// get all bank\r\nexport const getAllDistrict = () => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.getAllDistrict();\r\n    dispatch(actions.getDistrictSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getDistrictFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get previous  page\r\nexport const getPrevious = (previous) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.getPrevious(previous);\r\n    dispatch(actions.getDistrictSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getDistrictFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get next  page\r\nexport const getNext = (next) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.getNext(next);\r\n    dispatch(actions.getDistrictSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getDistrictFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n//get particular page\r\nexport const getPageDistrict =\r\n  ({ number, postsPerPage }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(actions.loadingAction());\r\n      const { data } = await API.getPageDistrict(number, postsPerPage);\r\n      dispatch(actions.getDistrictSuccessAction(data));\r\n    } catch (error) {\r\n      dispatch(actions.getDistrictFailAction(error));\r\n      errorFunction(error);\r\n    }\r\n  };\r\nexport const createDistrict =\r\n  ({ name, name_nepali, is_active }, history) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const body = JSON.stringify({ name, name_nepali, is_active });\r\n      dispatch(actions.loadingAction());\r\n      const { data } = await API.createDistrict(body);\r\n      dispatch(actions.createDistrictSuccessAction(data));\r\n      successFunction(\"District Added Successfully.\");\r\n      history.push(\"/district\");\r\n    } catch (error) {\r\n      dispatch(actions.createDistrictFailAction(error));\r\n      errorFunction(\"Failed to create District.\");\r\n    }\r\n  };\r\n// Delete  bank\r\nexport const deleteDistrict = (id) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.deleteDistrict(id);\r\n    dispatch(actions.deleteDistrictSuccessAction(data));\r\n    successFunction(\"District Deleted Successfully.\");\r\n  } catch (error) {\r\n    dispatch(actions.deleteDistrictFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n\r\n//update\r\nexport const updateDistrict = (id, history, values) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingUpdatedAction());\r\n    const { name, name_nepali, remarks, is_active } = values;\r\n    const body = JSON.stringify({ name, name_nepali, remarks, is_active });\r\n    const { data } = await API.updateDistrict(id, body);\r\n    dispatch(actions.updatedDistrictSuccessAction(data));\r\n    successFunction(\"District Updated Successfully \");\r\n    history.push(\"/district\");\r\n  } catch (error) {\r\n    dispatch(actions.updatedDistrictFailAction(error));\r\n    errorFunction(\"Failed to Update District\");\r\n  }\r\n};\r\n//handle Search\r\nexport const handleSearch = (search, postsPerPage) => async (dispatch) => {\r\n  try {\r\n    dispatch(actions.loadingAction());\r\n    const { data } = await API.handleSearch(search, postsPerPage);\r\n    dispatch(actions.getDistrictSuccessAction(data));\r\n  } catch (error) {\r\n    dispatch(actions.getDistrictFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n","export const defaultLimit = 10;\r\n"],"names":["search","onClick","addPermission","className","content","DisplayEntries","offset","limit","count","React","Pagination","postsPerPage","totalPosts","paginate","handleClick","currentPage","maxPageNumberLimit","minPageNumberLimit","pageNumbers","i","Math","ceil","push","length","disabled","map","number","setCurrentPage","PaginationLimit","setPostsPerPage","value","onChange","e","data","Number","target","width","height","active","style","color","fontSize","children","setShowModal","setMaxPageNumberLimit","setMinPageNumberLimit","history","useHistory","group","useSelector","state","auth","is_superuser","districts","district","next","previous","dispatch","useDispatch","useState","pageNumberLimit","scope","id","name_nepali","is_active","Status","Tooltip","type","districtConstants","payload","handleEdit","PaginationBlock","getPageDistrict","getPrevious","prevState","getNext","NoData","permissions","loading","loading_updated","useEffect","getDistrict","handleSearch","defaultLimit","ListingSkeleton","axiosInstance","createDistrict","body","updateDistrict","checkRedundantDataName","cancelToken","token","loadingAction","getDistrictSuccessAction","getDistrictFailAction","error","createDistrictSuccessAction","updatedDistrictSuccessAction","actions","API","errorFunction","name","JSON","stringify","successFunction","values","remarks"],"sourceRoot":""}