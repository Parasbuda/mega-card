{"version":3,"file":"static/js/887.f21c94fb.chunk.js","mappings":"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","sources":["Component/Pagination/DisplayEntries.js","Component/Pagination/index.js","Component/PaginationBlock/index.js","Component/Pagination/PaginationLimit.js","Component/ReportModal/PrintReportModal.js","Redux/PrintReport/api.js","Redux/PrintReport/actions.js","Redux/PrintReport/thunk.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst DisplayEntries = ({ offset, limit, count }) => {\r\n  return(\r\n    <React.Fragment>\r\n      <p>\r\n        Showing {offset} to{\" \"}\r\n        {limit > count ? count : limit === 0 ? count : limit} of {count} entries\r\n      </p>  \r\n    </React.Fragment> \r\n  );\r\n};\r\n\r\nexport default React.memo(DisplayEntries);","import React from \"react\";\r\nconst Pagination = ({\r\n  postsPerPage,\r\n  totalPosts,\r\n  paginate,\r\n  handleClick,\r\n  currentPage,\r\n  maxPageNumberLimit,\r\n  minPageNumberLimit,\r\n}) => {\r\n  const pageNumbers = [];\r\n  if (postsPerPage > 0) {\r\n    for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n      pageNumbers.push(i);\r\n    }\r\n  }\r\n  let pageIncrementBtn = null;\r\n  if (pageNumbers.length > maxPageNumberLimit) {\r\n    pageIncrementBtn = (\r\n      <button className=\"page-link\" onClick={() => handleClick(\"next\")}>\r\n        &hellip;\r\n      </button>\r\n    );\r\n  }\r\n\r\n  let pageDecrementBtn = null;\r\n  if (minPageNumberLimit >= 1) {\r\n    pageDecrementBtn = (\r\n      <button className=\"page-link\" onClick={() => handleClick(\"previous\")}>\r\n        &hellip;\r\n      </button>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <ul className=\"pagination pagination-sm justify-content-end\">\r\n        <li className=\"page-item \">\r\n          <button\r\n            className=\"page-link\"\r\n            onClick={() => handleClick(\"previous\")}\r\n            disabled={currentPage === pageNumbers[0] ? true : false}\r\n          >\r\n            &laquo;\r\n          </button>\r\n        </li>\r\n        {/* {pageDecrementBtn} */}\r\n        {pageNumbers.map((number, i) => {\r\n          if (number < maxPageNumberLimit + 1 && number > minPageNumberLimit) {\r\n            return (\r\n              <li className=\"page-item\" key={number}>\r\n                <button\r\n                  onClick={() => paginate(number)}\r\n                  className={`page-link ${\r\n                    i + 1 === currentPage ? \"active\" : null\r\n                  }`}\r\n                >\r\n                  {number}\r\n                </button>\r\n              </li>\r\n            );\r\n          } else {\r\n            return null;\r\n          }\r\n        })}\r\n        {/* {pageIncrementBtn} */}\r\n        <li className=\"page-item\">\r\n          <button\r\n            className=\"page-link\"\r\n            onClick={() => handleClick(\"next\")}\r\n            disabled={\r\n              currentPage === pageNumbers[pageNumbers.length - 1] ? true : false\r\n            }\r\n          >\r\n            &raquo;\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(Pagination);\r\n","import React from \"react\";\r\nimport DisplayEntries from \"../Pagination/DisplayEntries\";\r\nimport Pagination from \"../Pagination\";\r\nconst index = ({\r\n  currentPage,\r\n  postsPerPage,\r\n  count,\r\n  paginate,\r\n  handleClick,\r\n  setCurrentPage,\r\n  minPageNumberLimit,\r\n  maxPageNumberLimit,\r\n}) => {\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <div className=\"col-6\">\r\n          <DisplayEntries\r\n            offset={1 + (currentPage - 1) * postsPerPage}\r\n            limit={postsPerPage * currentPage}\r\n            count={count}\r\n          />\r\n        </div>\r\n        {postsPerPage < count && (\r\n          <div className=\"col-6 text-right\">\r\n            <Pagination\r\n              postsPerPage={postsPerPage}\r\n              totalPosts={count}\r\n              paginate={paginate}\r\n              handleClick={handleClick}\r\n              currentPage={currentPage}\r\n              setCurrentPage={setCurrentPage}\r\n              minPageNumberLimit={minPageNumberLimit}\r\n              maxPageNumberLimit={maxPageNumberLimit}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default index;\r\n","import React from \"react\";\r\n\r\nconst PaginationLimit = ({ postsPerPage, setPostsPerPage }) => {\r\n  const handleChange = (e) => {\r\n    const data = Number(e.target.value);\r\n    setPostsPerPage(data);\r\n  };\r\n  return (\r\n    <>\r\n      <p className=\"fw-normal p-0 m-0\">\r\n        Show\r\n        <span className=\"ml-1 mr-1\">\r\n          {\" \"}\r\n          <select value={postsPerPage} onChange={handleChange}>\r\n            <option value=\"10\">10</option>\r\n            <option value=\"20\">20</option>\r\n            <option value=\"40\">40</option>\r\n            <option value=\"99999999\">All</option>\r\n          </select>\r\n        </span>{\" \"}\r\n        entries\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(PaginationLimit);","import React, { useState } from \"react\";\r\nimport \"./modal.css\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport PaginationLimit from \"../Pagination/PaginationLimit\";\r\nimport PaginationBlock from \"../PaginationBlock\";\r\nimport {\r\n  getNext,\r\n  getParticularPage,\r\n  getPrevious,\r\n} from \"../../Redux/PrintReport/thunk\";\r\n\r\nconst PrintsReportModal = ({\r\n  showPrintReportModal,\r\n  setShowPrintReportModal,\r\n  formData,\r\n  prints,\r\n}) => {\r\n  const { district, branch, user, formatedStartDate, formatedEndDate } =\r\n    formData;\r\n  const loading = useSelector((state) => state.printReport.loading);\r\n  const count = useSelector((state) => state.printReport.count);\r\n  const previous = useSelector((state) => state.printReport.previous);\r\n  const next = useSelector((state) => state.printReport.next);\r\n  const dispatch = useDispatch();\r\n  const modalClass = showPrintReportModal\r\n    ? \"modal display-block\"\r\n    : \"modal display-none\";\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [maxPageNumberLimit, setMaxPageNumberLimit] = useState(5);\r\n  const [minPageNumberLimit, setMinPageNumberLimit] = useState(0);\r\n  const [postsPerPage, setPostsPerPage] = useState(10);\r\n  const pageNumberLimit = 5;\r\n  //change page\r\n  const paginate = (number) => {\r\n    dispatch(\r\n      getParticularPage({\r\n        number,\r\n        postsPerPage,\r\n        district,\r\n        branch,\r\n        user,\r\n        formatedStartDate,\r\n        formatedEndDate,\r\n      })\r\n    );\r\n    setCurrentPage(number);\r\n  };\r\n\r\n  //handle Click\r\n  const handleClick = (type) => {\r\n    if (type === \"previous\") {\r\n      dispatch(getPrevious(previous));\r\n      setCurrentPage((prevState) => prevState - 1);\r\n      if ((currentPage - 1) % pageNumberLimit === 0) {\r\n        setMaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\r\n        setMinPageNumberLimit(minPageNumberLimit - pageNumberLimit);\r\n      }\r\n    } else if (type === \"next\") {\r\n      dispatch(getNext(next));\r\n      setCurrentPage((prevState) => prevState + 1);\r\n      if (currentPage + 1 > maxPageNumberLimit) {\r\n        setMaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\r\n        setMinPageNumberLimit(minPageNumberLimit + pageNumberLimit);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={modalClass} tabIndex=\"-1\">\r\n        <div className=\"container-fluid main-container\">\r\n          <div className=\"modal-content content\">\r\n            <div className=\"modal-header\">\r\n              <h5 className=\"modal-title\" id=\"exampleModalLabel\">\r\n                Card Print Report\r\n              </h5>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn-close\"\r\n                data-dismiss=\"modal\"\r\n                aria-label=\"Close\"\r\n                onClick={() => setShowPrintReportModal(false)}\r\n              >\r\n                <span aria-hidden=\"true\">&times;</span>\r\n              </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              {prints?.length > 0 && (\r\n                <>\r\n                  <div className=\"col-6\">\r\n                    <PaginationLimit\r\n                      postsPerPage={postsPerPage}\r\n                      setPostsPerPage={setPostsPerPage}\r\n                    />\r\n                  </div>\r\n                </>\r\n              )}\r\n              {loading ? (\r\n                <div className=\"d-flex justify-content-center \">\r\n                  <div className=\"spinner-border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <>\r\n                  {prints?.length === 0 ? (\r\n                    \"You have No records\"\r\n                  ) : (\r\n                    <table className=\"table table table-bordered \">\r\n                      <thead className=\"text-center\">\r\n                        <tr className=\"text-center\">\r\n                          <th scope=\"col\">#</th>\r\n                          <th scope=\"col\">Card No</th>\r\n                          <th scope=\"col\">Name </th>\r\n                          <th scope=\"col\">Address</th>\r\n                          <th scope=\"col\">Mobile Number</th>\r\n                          <th scope=\"col\">Branch</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {prints?.length > 0 &&\r\n                          prints.map((detail, i) => {\r\n                            const {\r\n                              id,\r\n                              card_no,\r\n                              first_name_nepali,\r\n                              middle_name_nepali,\r\n                              last_name_nepali,\r\n                              address_nepali,\r\n                              mobile_no_nepali,\r\n                              branch,\r\n                            } = detail;\r\n                            return (\r\n                              <tr key={id} className=\"text-center\">\r\n                                <td>\r\n                                  {\" \"}\r\n                                  {postsPerPage * (currentPage - 1) + (i + 1)}\r\n                                </td>\r\n                                <td>{card_no}</td>\r\n\r\n                                <td>\r\n                                  {first_name_nepali +\r\n                                    \" \" +\r\n                                    middle_name_nepali +\r\n                                    \" \" +\r\n                                    last_name_nepali}\r\n                                </td>\r\n                                <td>{address_nepali}</td>\r\n                                <td>{mobile_no_nepali}</td>\r\n                                <td>{branch.name}</td>\r\n                              </tr>\r\n                            );\r\n                          })}\r\n                      </tbody>\r\n                    </table>\r\n                  )}\r\n                </>\r\n              )}\r\n            </div>\r\n            {count > 0 && (\r\n              <PaginationBlock\r\n                currentPage={currentPage}\r\n                postsPerPage={postsPerPage}\r\n                count={count}\r\n                paginate={paginate}\r\n                handleClick={handleClick}\r\n                setCurrentPage={setCurrentPage}\r\n                minPageNumberLimit={minPageNumberLimit}\r\n                maxPageNumberLimit={maxPageNumberLimit}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>{\" \"}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default React.memo(PrintsReportModal);\r\n","import axiosInstance from \"../../utils/axios\";\r\n\r\n//obtaining all data\r\nexport const getPrintReportData = ({\r\n  formatedStartDate,\r\n  formatedEndDate,\r\n  district,\r\n  branch,\r\n  user,\r\n  postsPerPage,\r\n}) => {\r\n  return axiosInstance.get(\r\n    `api/v1/core-app/print-debit-report?offset=0&limit=${postsPerPage}&district=${district}&branch=${branch}&created_by=${user}&date_after=${formatedStartDate}&date_before=${formatedEndDate}`\r\n  );\r\n};\r\n\r\nexport const getPrevious = (previous) => axiosInstance.get(previous);\r\n\r\nexport const getNext = (next) => axiosInstance.get(next);\r\n\r\nexport const getParticularPage = (\r\n  number,\r\n  postsPerPage,\r\n  district,\r\n  branch,\r\n  user,\r\n  formatedStartDate,\r\n  formatedEndDate\r\n) =>\r\n  axiosInstance.get(\r\n    `api/v1/core-app/print-debit-report?offset=${\r\n      (number - 1) * postsPerPage\r\n    }&limit=${postsPerPage}&district=${district}&branch=${branch}&created_by=${user}&date_after=${formatedStartDate}&date_before=${formatedEndDate}`\r\n  );\r\n// all data\r\nexport const getAllPrintReportData = ({\r\n  formatedStartDate,\r\n  formatedEndDate,\r\n  district,\r\n  branch,\r\n  user,\r\n}) => {\r\n  return axiosInstance.get(\r\n    `api/v1/core-app/print-debit-report?district=${district}&branch=${branch}&created_by=${user}&date_after=${formatedStartDate}&date_before=${formatedEndDate}&limit=0`\r\n  );\r\n};\r\n","import { printReportConstants } from \"./constants\";\r\n// actions\r\nexport const loadingAction = () => ({\r\n  type: printReportConstants.LOADING_REPORT,\r\n});\r\n\r\nexport const getPrintReportSuccess = (data) => ({\r\n  type: printReportConstants.GET_PRINT_REPORT_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const getPrintReportFailAction = (error) => ({\r\n  type: printReportConstants.GET_PRINT_REPORT_FAIL,\r\n  payload: error,\r\n});\r\nexport const getAllPrintReportSuccess = (data) => ({\r\n  type: printReportConstants.GET_ALL_PRINT_REPORT_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const getAllPrintFailAction = (error) => ({\r\n  type: printReportConstants.GET_ALL_PRINT_REPORT_FAIL,\r\n  payload: error,\r\n});\r\n","import * as API from \"./api\";\r\nimport * as action from \"./actions\";\r\nimport { errorFunction, infoFunction } from \"../../Component/Alert\";\r\n\r\n// purchase order summary report\r\nexport const getPrintReport = (postsPerPage, body) => async (dispatch) => {\r\n  const { formatedStartDate, formatedEndDate, district, branch, user } = body;\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const { data } = await API.getPrintReportData({\r\n      formatedStartDate,\r\n      formatedEndDate,\r\n      district,\r\n      branch,\r\n      user,\r\n      postsPerPage,\r\n    });\r\n    if (!data?.results.length > 0) {\r\n      infoFunction(\"Data Not found\");\r\n    }\r\n    dispatch(action.getPrintReportSuccess(data));\r\n  } catch (error) {\r\n    dispatch(action.getPrintReportFailAction(error));\r\n    errorFunction(error);\r\n  }\r\n};\r\n\r\n// /get previous\r\nexport const getPrevious = (previous) => async (dispatch) => {\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const { data } = await API.getPrevious(previous);\r\n    dispatch(action.getPrintReportSuccess(data));\r\n  } catch (error) {\r\n    dispatch(action.getPrintReportFailAction(error));\r\n  }\r\n};\r\n//get next\r\nexport const getNext = (next) => async (dispatch) => {\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const { data } = await API.getNext(next);\r\n    dispatch(action.getPrintReportSuccess(data));\r\n  } catch (error) {\r\n    dispatch(action.getPrintReportFailAction(error));\r\n  }\r\n};\r\n//get particular page\r\nexport const getParticularPage =\r\n  ({\r\n    number,\r\n    postsPerPage,\r\n    formatedStartDate,\r\n    formatedEndDate,\r\n    district,\r\n    branch,\r\n    user,\r\n  }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      dispatch(action.loadingAction());\r\n      const { data } = await API.getParticularPage(\r\n        number,\r\n        postsPerPage,\r\n        formatedStartDate,\r\n        formatedEndDate,\r\n        district,\r\n        branch,\r\n        user\r\n      );\r\n      dispatch(action.getPrintReportSuccess(data));\r\n    } catch (error) {\r\n      dispatch(action.getPrintReportFailAction(error));\r\n    }\r\n  };\r\n// all data\r\nexport const getAllPrintReport = (body) => async (dispatch) => {\r\n  const { formatedStartDate, formatedEndDate, district, branch, user } = body;\r\n\r\n  try {\r\n    dispatch(action.loadingAction());\r\n    const { data } = await API.getAllPrintReportData({\r\n      formatedStartDate,\r\n      formatedEndDate,\r\n      district,\r\n      branch,\r\n      user,\r\n    });\r\n    if (!data?.results.length > 0) {\r\n      infoFunction(\"Data Not found\");\r\n    }\r\n    dispatch(action.getPrintReportSuccess(data));\r\n  } catch (error) {\r\n    dispatch(action.getPrintReportFailAction(error));\r\n  }\r\n};\r\n"],"names":["DisplayEntries","offset","limit","count","React","Pagination","postsPerPage","totalPosts","paginate","handleClick","currentPage","maxPageNumberLimit","minPageNumberLimit","pageNumbers","i","Math","ceil","push","length","className","onClick","disabled","map","number","setCurrentPage","PaginationLimit","setPostsPerPage","value","onChange","e","data","Number","target","PrintsReportModal","showPrintReportModal","setShowPrintReportModal","formData","prints","district","branch","user","formatedStartDate","formatedEndDate","loading","useSelector","state","printReport","previous","next","dispatch","useDispatch","modalClass","useState","setMaxPageNumberLimit","setMinPageNumberLimit","tabIndex","id","type","role","scope","detail","card_no","first_name_nepali","middle_name_nepali","last_name_nepali","address_nepali","mobile_no_nepali","name","PaginationBlock","getParticularPage","getPrevious","prevState","getNext","getPrintReportData","axiosInstance","getAllPrintReportData","loadingAction","printReportConstants","getPrintReportSuccess","payload","getPrintReportFailAction","error","getPrintReport","body","action","API","results","infoFunction","errorFunction","getAllPrintReport"],"sourceRoot":""}