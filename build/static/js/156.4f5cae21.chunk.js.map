{"version":3,"file":"static/js/156.4f5cae21.chunk.js","mappings":"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","sources":["Pages/User/EditUser.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport Button from \"../../Component/Button/Button\";\r\nimport Select from \"react-select\";\r\nimport * as Yup from \"yup\";\r\nimport { BsFillEyeFill, BsFillEyeSlashFill } from \"react-icons/bs\";\r\nimport TextError from \"../../Component/TextError/TextError\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { updateUser } from \"../../Redux/User/thunk\";\r\nimport { errorFunction } from \"../../Component/Alert\";\r\n\r\nimport {\r\n  checkRedundantDataUser,\r\n  checkRedundantDataID,\r\n} from \"../../utils/redundant/user\";\r\nimport \"./user.css\";\r\nimport { genders } from \"../../Component/Data/Data\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { AsyncPaginate } from \"react-select-async-paginate\";\r\nimport axiosInstance from \"../../utils/axios\";\r\nconst EditUser = ({ loading, currentPage }) => {\r\n  // props\r\n  const history = useHistory();\r\n  const permissions = useSelector((state) => state.auth.permissions);\r\n  const is_superuser = useSelector((state) => state.auth.is_superuser);\r\n  const user = useSelector((state) => state.user.user);\r\n  const edit = useSelector((state) => state.user.edit);\r\n  const dispatch = useDispatch();\r\n  const groupOptions = [\r\n    { id: 1, name: \"ADMIN\" },\r\n    { id: 2, name: \"STAFF\" },\r\n    { id: 3, name: \"MAINTAINER\" },\r\n  ];\r\n  //state for disabling the submit button\r\n\r\n  const [lock, setLock] = useState(false);\r\n  //initial state of the form\r\n  const initialState = {\r\n    first_name: edit ? user?.first_name : \"\",\r\n    middle_name: edit ? user?.middle_name : \"\",\r\n    last_name: edit ? user?.last_name : \"\",\r\n    email: edit ? user?.email : \"\",\r\n    username: edit ? user?.username : \"\",\r\n    user_branch: edit ? user?.user_branch : null,\r\n    group: edit ? groupOptions.find((temp) => temp.id === user?.group) : null,\r\n    employee_id: edit ? user?.employee_id : \"\",\r\n    gender: edit ? genders.find((gender) => gender.id === user?.gender) : \"\",\r\n    remarks: \"\",\r\n    is_active: edit ? user?.is_active : false,\r\n  };\r\n\r\n  //validation rules of the form\r\n  const validationSchema = Yup.object().shape({\r\n    first_name: Yup.string()\r\n      .min(2, \"First name must be at least 2 characters.\")\r\n      .max(50, \"First name should be 50 characters.\")\r\n      .matches(\r\n        /(?=.*^[A-Za-z]\\w).*$/,\r\n        \"First name should only contain alphabet.\"\r\n      ),\r\n    middle_name: Yup.string()\r\n      .min(2, \"Middle name must be at least 2 characters.\")\r\n      .max(50, \"Middle name should be 50 characters.\")\r\n      .matches(\r\n        /(?=.*^[A-Za-z]\\w).*$/,\r\n        \"Middle name should only contain alphabet.\"\r\n      ),\r\n\r\n    last_name: Yup.string()\r\n      .min(2, \"Last name must be at least 2 characters.\")\r\n      .max(50, \"Last name should be 50 characters.\")\r\n      .matches(\r\n        /(?=.*^[A-Za-z]\\w).*$/,\r\n        \"Last name should only contain alphabet.\"\r\n      ),\r\n    email: Yup.string().email().required(\"Email is required.\"),\r\n    user_branch: Yup.object()\r\n      .typeError(\"Branch is required\")\r\n      .required(\"Branch is required\"),\r\n    group: Yup.object()\r\n      .typeError(\"Group is required\")\r\n      .required(\"Group is required\"),\r\n\r\n    employee_id: Yup.string(),\r\n    username: Yup.string()\r\n      .required(\"Username is required.\")\r\n      .min(4, \"Username must be at least 4 characters.\")\r\n      .max(50, \"Username should be 50 characters.\")\r\n      .matches(\r\n        /(?=.*^[A-Za-z_]\\w).*$/,\r\n        \"Username should begin with _ or alphabet.\"\r\n      ),\r\n\r\n    is_active: Yup.bool(),\r\n    gender: Yup.object().nullable(true),\r\n    remarks: Yup.string().required(\"Remarks is required\"),\r\n  });\r\n  const onSubmit = (values) => {\r\n    const {\r\n      first_name,\r\n      middle_name,\r\n      last_name,\r\n      email,\r\n      username,\r\n      employee_id,\r\n      user_branch,\r\n      is_active,\r\n      group,\r\n      gender,\r\n      remarks,\r\n    } = values;\r\n\r\n    const capitalFirstName =\r\n      first_name?.charAt(0).toUpperCase() + first_name?.slice(1);\r\n    const capitalLastName =\r\n      last_name?.charAt(0).toUpperCase() + last_name?.slice(1);\r\n    const capitalMiddleName =\r\n      middle_name?.charAt(0).toUpperCase() + middle_name?.slice(1);\r\n\r\n    setLock(true);\r\n    if (edit) {\r\n      const id = user.id;\r\n      dispatch(\r\n        updateUser(\r\n          id,\r\n          {\r\n            first_name: capitalFirstName,\r\n            middle_name: capitalMiddleName,\r\n            last_name: capitalLastName,\r\n            email,\r\n            username: username?.charAt(0).toLowerCase() + username?.slice(1),\r\n            gender: gender !== \"\" ? gender.id : \"\",\r\n            employee_id,\r\n            user_branch: user_branch?.id,\r\n            group: group?.id,\r\n            is_active,\r\n            remarks,\r\n          },\r\n          history,\r\n          currentPage\r\n        )\r\n      );\r\n    }\r\n  };\r\n\r\n  // function which checks whether the bank is added already or not\r\n  const handleChange = async (e) => {\r\n    if (edit && e.target.value !== user?.username) {\r\n      if (e.target.value.trim() && e.target.value !== \"\") {\r\n        const result = await checkRedundantDataUser(e);\r\n        if (result) {\r\n          errorFunction(\"User name with this Name is already added. \");\r\n          setLock(true);\r\n        } else {\r\n          setLock(false);\r\n        }\r\n      }\r\n    }\r\n    if (!edit && e.target.value.trim() && e.target.value !== \"\") {\r\n      const result = await checkRedundantDataUser(e);\r\n      if (result) {\r\n        errorFunction(\"User name with this Name is already added. \");\r\n        setLock(true);\r\n      } else {\r\n        setLock(false);\r\n      }\r\n    }\r\n  };\r\n  const handleChangeID = async (e) => {\r\n    if (edit && e.target.value !== user?.employee_id) {\r\n      if (e.target.value.trim() && e.target.value !== \"\") {\r\n        const result = await checkRedundantDataID(e);\r\n        if (result) {\r\n          errorFunction(\"User name with this Employee ID is already added. \");\r\n          setLock(true);\r\n        } else {\r\n          setLock(false);\r\n        }\r\n      }\r\n    }\r\n    if (!edit && e.target.value.trim() && e.target.value !== \"\") {\r\n      const result = await checkRedundantDataID(e);\r\n      if (result) {\r\n        errorFunction(\"User name with this Employee ID is already added. \");\r\n        setLock(true);\r\n      } else {\r\n        setLock(false);\r\n      }\r\n    }\r\n  };\r\n  const loadOptions = async (search, loadOptions, { limit, offset }) => {\r\n    const { data } = await axiosInstance(\r\n      `/api/v1/core-app/branch?search=${search}&offset=${offset}&limit=${limit}`\r\n    );\r\n\r\n    return {\r\n      options: data.results,\r\n      hasMore: data.count > limit ? true : false,\r\n      additional: {\r\n        offset: limit,\r\n        limit: limit + 10,\r\n      },\r\n    };\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"row  mt-3\">\r\n        <div className=\"col-12\">\r\n          <div className=\"registration-process \">\r\n            <Formik\r\n              enableReinitialize={true}\r\n              initialValues={initialState}\r\n              validationSchema={validationSchema}\r\n              onSubmit={onSubmit}\r\n            >\r\n              {(formik) => {\r\n                return (\r\n                  <Form autoComplete=\"off\">\r\n                    <div className=\"form-group row mb-2 justify-content-center\">\r\n                      <div className=\"col-4\">\r\n                        <label htmlFor=\"first_name\" className=\"fw-bold\">\r\n                          First Name\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"first_name\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"First Name\"\r\n                        />\r\n                        <ErrorMessage name=\"first_name\" component={TextError} />\r\n                      </div>\r\n                      <div className=\"col-4\">\r\n                        <label htmlFor=\"middle_name\" className=\"fw-bold\">\r\n                          Middle Name\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"middle_name\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"Middle Name\"\r\n                        />\r\n                        <ErrorMessage\r\n                          name=\"middle_name\"\r\n                          component={TextError}\r\n                        />\r\n                      </div>\r\n                      <div className=\"col-4\">\r\n                        <label htmlFor=\"last_name\" className=\"fw-bold\">\r\n                          Last Name\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"last_name\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"Last Name\"\r\n                        />\r\n                        <ErrorMessage name=\"last_name\" component={TextError} />\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"form-group row mb-2 justify-content-center\">\r\n                      <div className=\"col-4\">\r\n                        <label htmlFor=\"username\" className=\"fw-bold\">\r\n                          User Name (Case sensitive)\r\n                          <span className=\"text-danger\">*</span>\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"username\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"Username\"\r\n                          onChange={(e) => {\r\n                            const val = (e.target.value || \"\").replace(\r\n                              /\\s+/gi,\r\n                              \"\"\r\n                            );\r\n                            formik.setFieldValue(\"username\", val.trim());\r\n                            handleChange(e);\r\n                          }}\r\n                        />\r\n                        <ErrorMessage name=\"username\" component={TextError} />\r\n                      </div>\r\n                      <div className=\"col-4\">\r\n                        <label htmlFor=\"email\" className=\"fw-bold\">\r\n                          Email\r\n                          <strong className=\"text-danger ml-1\">*</strong>\r\n                        </label>\r\n                        <Field\r\n                          type=\"email\"\r\n                          name=\"email\"\r\n                          className=\"form-control \"\r\n                          placeholder=\"Email\"\r\n                        />\r\n                        <ErrorMessage name=\"email\" component={TextError} />\r\n                      </div>\r\n                      <div className=\"col-4 \">\r\n                        <label htmlFor=\"user_branch\" className=\"fw-bold \">\r\n                          Branch\r\n                          <strong className=\"text-danger ml-1\">*</strong>\r\n                        </label>\r\n                        <div style={{ display: \"flex\" }}>\r\n                          <div className=\"col-12\">\r\n                            <AsyncPaginate\r\n                              value={formik.values.user_branch}\r\n                              isClearable=\"true\"\r\n                              isSearchable=\"true\"\r\n                              name=\"user_branch\"\r\n                              getOptionLabel={(option) => `${option?.name} `}\r\n                              getOptionValue={(option) => `${option?.id}`}\r\n                              onChange={(selected) => {\r\n                                formik.setFieldValue(\"user_branch\", selected);\r\n                              }}\r\n                              loadOptions={loadOptions}\r\n                              additional={{\r\n                                offset: 0,\r\n                                limit: 10,\r\n                              }}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <ErrorMessage\r\n                            name=\"user_branch\"\r\n                            component={TextError}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group row mb-2\">\r\n                      <div className=\"col-3 \">\r\n                        <label htmlFor=\"group\" className=\"fw-bold \">\r\n                          Group\r\n                          <strong className=\"text-danger ml-1\">*</strong>\r\n                        </label>\r\n                        <div style={{ display: \"flex\" }}>\r\n                          <div className=\"col-12\">\r\n                            <Select\r\n                              value={formik.values.group}\r\n                              isClearable=\"true\"\r\n                              isSearchable=\"true\"\r\n                              name=\"group\"\r\n                              getOptionLabel={(option) => `${option?.name} `}\r\n                              getOptionValue={(option) => `${option?.id}`}\r\n                              onChange={(selected) => {\r\n                                formik.setFieldValue(\"group\", selected);\r\n                              }}\r\n                              options={groupOptions}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <ErrorMessage name=\"group\" component={TextError} />\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col-3\">\r\n                        <label htmlFor=\"gender\" className=\"fw-bold\">\r\n                          Gender\r\n                        </label>\r\n                        <Select\r\n                          value={formik.values.gender}\r\n                          isClearable=\"true\"\r\n                          isSearchable=\"true\"\r\n                          name=\"gender\"\r\n                          getOptionLabel={(option) => `${option?.name} `}\r\n                          getOptionValue={(option) => `${option?.id}`}\r\n                          options={genders}\r\n                          onChange={(selected) => {\r\n                            formik.setFieldValue(\"gender\", selected);\r\n                          }}\r\n                        />\r\n                        <ErrorMessage name=\"gender\" component={TextError} />\r\n                      </div>\r\n                      <div className=\" col-3\">\r\n                        <label\r\n                          htmlFor=\"employee_id\"\r\n                          className=\"fw-bold float-start\"\r\n                        >\r\n                          Employee ID\r\n                          <strong className=\"text-danger ml-1\">*</strong>\r\n                        </label>\r\n                        <Field\r\n                          type=\"text\"\r\n                          name=\"employee_id\"\r\n                          value={formik.values.employee_id}\r\n                          className=\"form-control \"\r\n                          placeholder=\"Employee ID\"\r\n                          onChange={(e) => {\r\n                            handleChangeID(e);\r\n                            formik.setFieldValue(\"employee_id\", e.target.value);\r\n                          }}\r\n                        />\r\n                        <ErrorMessage\r\n                          name=\"employee_id\"\r\n                          component={TextError}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group row mb-2\">\r\n                      <div className=\"col-3\">\r\n                        <label htmlFor=\"remarks\" className=\"fw-bold\">\r\n                          Remarks\r\n                          <span className=\"text-danger\">*</span>\r\n                        </label>\r\n                        <textarea\r\n                          type=\"text\"\r\n                          name=\"remarks\"\r\n                          onChange={(e) => {\r\n                            formik.setFieldValue(\r\n                              \"remarks\",\r\n                              e.target.value.trim()\r\n                            );\r\n                          }}\r\n                          className=\"form-control\"\r\n                          placeholder=\"Enter remarks\"\r\n                        />\r\n                        <ErrorMessage name=\"remarks\" component={TextError} />\r\n                      </div>\r\n                      <div className=\"col-12 text-center \">\r\n                        <Field\r\n                          type=\"checkbox\"\r\n                          name=\"is_active\"\r\n                          id=\"is_active\"\r\n                          className=\"filled-in chk-col-blue\"\r\n                        />\r\n                        <label htmlFor=\"is_active\" className=\"fw-bold  mx-2\">\r\n                          {\" \"}\r\n                          Active\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group text-center\">\r\n                      <Button\r\n                        type={\"btn\"}\r\n                        className={\"btn btn-primary \"}\r\n                        loading={loading}\r\n                        disabled={lock}\r\n                        title={\"Update\"}\r\n                        content={\"Update\"}\r\n                      />\r\n                    </div>\r\n                  </Form>\r\n                );\r\n              }}\r\n            </Formik>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default React.memo(EditUser);\r\n"],"names":["EditUser","loading","currentPage","history","useHistory","user","useSelector","state","auth","permissions","is_superuser","edit","dispatch","useDispatch","groupOptions","id","name","useState","lock","setLock","initialState","first_name","middle_name","last_name","email","username","user_branch","group","find","temp","employee_id","gender","genders","remarks","is_active","validationSchema","Yup","shape","min","max","matches","required","typeError","nullable","handleChange","e","target","value","trim","checkRedundantDataUser","errorFunction","handleChangeID","checkRedundantDataID","loadOptions","search","limit","offset","axiosInstance","data","options","results","hasMore","count","additional","className","enableReinitialize","initialValues","onSubmit","values","capitalFirstName","charAt","toUpperCase","slice","capitalLastName","capitalMiddleName","updateUser","toLowerCase","formik","autoComplete","htmlFor","type","placeholder","component","TextError","onChange","val","replace","setFieldValue","style","display","isClearable","isSearchable","getOptionLabel","option","getOptionValue","selected","disabled","title","content","React"],"sourceRoot":""}